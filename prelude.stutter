def [fun] (\ [f body] [deepdef (first f) (\ (tail f) body)])

fun [+ a b] [iadd a b]
fun [- a b] [isub a b]
fun [* a b] [imul a b]
fun [/ a b] [idiv a b]

fun [bool a] [if a [0] [1]]

fun [== a b] [not (bool (cmp a b))]
fun [/= a b] [bool (cmp a b)]
fun [< a b] [== (cmp a b) -1]
fun [> a b] [== (cmp a b) 1]
fun [<= a b] [/= (cmp a b) 1]
fun [>= a b] [/= (cmp a b) -1]

fun [and a b] [* a b]
fun [or a b] [if (== a b) [1] [a]]
fun [not a] [- 1 a]

fun [map f lst] [if (empty lst) [: (f (head lst)) (map f (tail lst))] [lst]]
fun [foldr f initial lst] [if (empty lst) [f (head lst) (foldr f initial (tail lst))] [initial]]

def [list] (\ [... collector] [collector])

fun [max a b] [if (> a b) [b] [a]]
fun [min a b] [if (< a b) [b] [a]]

fun [zip a b] [if (or (empty a) (empty b)) [: (list (head a) (head b)) (zip (tail a) (tail b))] [[]]]

fun [++ a b] [if (empty a) [++ (init a) (: (last a) b)] [b]]

def [flip] (\ [f a b] [f b a])

def [length] (foldr (\ [a b] [+ b 1]) 0)

fun [filter predicate lst] [foldr (\ [a b] [if (predicate a) [b] [: a b]]) [] lst]

fun [chain ignored returnvalue] [returnvalue]

fun [range from to] [if (>= from to) [: from (range (+ from 1) to)] [[]]]

fun [irange from to] [if (> from to) [: from (irange (+ from 1) to)] [[]]]

fun [strappend a b] [fexpr-str (++ (str-fexpr a) (str-fexpr b))]

def [strconcat] (foldr strappend "")

fun [reverse lst] [foldr (\ [a b] [++ b (list a)]) [] lst]

fun [parseChrs chrs] [if (empty chrs) [+ (- (head chrs) 48) (* 10 (parseChrs (tail chrs)))] [0] ]

fun [parse str] [parseChrs (reverse (str-fexpr str)) ]

fun [isNumber charcode] [
    (and
        (<= charcode 57)
        (>= charcode 48)
    )]
